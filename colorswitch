#!/bin/bash
# version 0.003

themes_dir="/home/$USER/.colors"

error_exit() {
    echo "Script error: $1" >&2
    exit 1
}

declare -A themes


load_color_theme () {
    local _path="$1"
    local key=${_path##*/}
    # x is line counter; y is non-empty line counter
    local x=y=0
    local line _colors
    local regex_pattern_comment='^\#'
    local regex_pattern_p='^P'
    echo "processing file... $_path"
    line=""; _colors=()
    while read -r line; do
        # printf '%s\n' "$line"
        x=$((x+1))
        [[ "$line" ]] || continue
        [[ "$line" =~ $regex_pattern_comment ]] && continue
y=$((y+1))
        if [[ "$line" =~ $regex_pattern_p ]]; then
_colors+=("$line")
        else
error_exit "syntax error"
        fi
done < "$_path"
    local _this_theme=$(printf '%s\n' "{_colors[@]}")
    # printf 'key: %s\n' "$key"
    themes["$key"]=${_this_theme}
}

load_color_themes () {
    while read -r _file; do
load_color_theme "$_file"
    done < <(find $themes_dir -type f)
}

apply_color_theme () {
    local key="$1"
    local this_theme
    this_theme=${themes["$key"]}
    [[ "$this_theme" ]] || {
        error_exit "$(printf 'unknown color theme: %s' "$key")"
    }
    local x=0
    while read -r _color; do
        # printf '%s\n' "$line"
        x=$((x+1))
        echo -en "\e]${_color}"
    done <<< "$this_theme"
    clear
}


load_color_themes

(( $# == 0 )) && {
    for ident in "${!themes[@]}"; do
printf '%s\n' $ident
    done | sort
    exit 0
}

# apply a color theme to the console
apply_color_theme "$1"
